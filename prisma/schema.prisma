// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?   // Optional for OAuth users
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  companies Company[] // User can have multiple companies

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Company {
  id              String           @id @default(cuid())
  name            String
  description     String?
  website         String?
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  marketResearch  MarketResearch[]
  tasks           Task[]
  notes           Note[]
  documents       Document[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("companies")
}

model MarketResearch {
  id              String                 @id @default(cuid())
  companyId       String
  company         Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  status          MarketResearchStatus   @default(PENDING)
  searchResults   Json?                  // Tavily search results
  financialData   Json?                  // Alpha Vantage financial data  
  competitorData  Json?                  // Competitor analysis data
  aiAnalysis      String?                // Claude's analysis and summary
  executiveSummary String?               // Key insights summary
  marketPosition  String?                // Market positioning analysis
  competitors     Json?                  // List of key competitors
  opportunities   Json?                  // Growth opportunities identified
  threats         Json?                  // Risk factors and threats
  recommendations Json?                  // Strategic recommendations
  lastUpdated     DateTime               @default(now())
  createdAt       DateTime               @default(now())
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("tasks")
}

model Note {
  id          String   @id @default(cuid())
  title       String
  content     String?  @db.Text
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("notes")
}

model Document {
  id          String   @id @default(cuid())
  filename    String   // Original filename
  filesize    Int      // Size in bytes
  mimetype    String   // File MIME type
  blobUrl     String   // Vercel Blob URL
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("documents")
}

enum MarketResearchStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}
